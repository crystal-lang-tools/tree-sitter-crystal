======
macros
:error
======

{% if true %}
{% for i in [1, 2, 3] %}
%var = 1 + {{ word }}
foo = %var + 4
{% end %}
{% end %}

---

(ERROR
  (MISSING identifier)
  (operator)
  (call
    (call
      (true)
      (ERROR
        (operator))
      (operator)
      (call
        (identifier)
        (argument_list
          (call
            (identifier)
            (argument_list
              (call
                (identifier)
                (argument_list
                  (array
                    (integer)
                    (integer)
                    (integer)))))))))
    (ERROR
      (operator))
    (operator)
    (assign
      (identifier)
      (call
        (integer)
        (operator)
        (tuple
          (tuple
            (identifier))))))
  (then
    (call
      (call
        (identifier)
        (ERROR)
        (operator)
        (identifier))
      (operator)
      (integer))
    (tuple
      (call
        (call
          (MISSING identifier)
          (operator)
          (identifier))
        (operator)
        (MISSING identifier)))
    (tuple
      (call
        (call
          (MISSING identifier)
          (operator)
          (identifier))
        (operator)
        (MISSING identifier)))))

==============
pseudo methods
==============

class ClassName
  def initialize
    self.is_a?(Object)
    self.nil?
    typeof(self, other) # works
    sizeof(self.class) # works
    instance_sizeof(self.class) # works
    pointerof(self)
    offsetof(self.class, 1) # works
    self.as(Object)
    self.as?(Object)
    responds_to?(:method)
    self.!
  end
end

---

(expressions
  (class_def
    (constant)
    (expressions
      (method_def
        (identifier)
        (expressions
          (call
            (self)
            (identifier)
            (argument_list
              (constant)))
          (call
            (self)
            (identifier))
          (typeof
            (self)
            (identifier))
          (comment)
          (sizeof
            (class_type
              (self)))
          (comment)
          (instance_sizeof
            (class_type
              (self)))
          (comment)
          (call
            (identifier)
            (argument_list
              (self)))
          (offsetof
            (class_type
              (self))
            (integer))
          (comment)
          (call
            (self)
            (identifier)
            (argument_list
              (constant)))
          (call
            (self)
            (identifier)
            (argument_list
              (constant)))
          (call
            (identifier)
            (argument_list
              (symbol)))
          (call
            (self)
            (operator)))))))

=======================
misc keywords / methods
=======================

super
previous_def
uninitialized Class

---

(expressions
  (identifier)
  (identifier)
  (call
    (identifier)
    (argument_list
      (constant))))

==========================
fun def params on newlines
:error
==========================

fun
extreme_fun
(
param1
:
Type
,
param2
:
Type
)
:
ReturnType
  puts "hello"
end

---

(expressions
  (fun_def
    name: (identifier)
    body: (expressions
      (identifier)
      (ERROR)
      (constant)
      (ERROR)
      (identifier)
      (ERROR)
      (constant))
    (ERROR)
    body: (constant)
    body: (call
      method: (identifier)
      arguments: (argument_list
        (string)))))

============================
.as method with pointer type
:error
============================

node.as(LibXML::Node*)

---

(expressions
  (call
    (identifier)
    (identifier)
    (argument_list
      (op_call
        (constant)
        (operator)
        (MISSING identifier)))))

==============================
instance var with pointer type
:error
==============================

@ivar : UInt8*

---

(expressions
  (call
    (type_declaration
      (instance_var)
      (constant))
    (operator)
    (MISSING identifier)))

=================================
Array-like and hash-like literals
:error
=================================

Set{1, 2, 3}
MyType{"foo" => "bar"}

---



=================
static array type
:error
=================

StaticArray(Int32, 8)
StaticArray(Char*, 2)

---



==========================
symbols ending with equals
:error
==========================

:hello=
:world==world
:world == world

---

(expressions
  (symbol)
  (symbol)
  (ERROR
    (identifier))
  (call
    (symbol)
    (operator)
    (identifier)))

=================================
case expression with typed tuples
:error
=================================

case {value, this_value}
in {String, String}
	puts "hello"
in {Int32, false}
	puts "world"
end

---



=====================
global method with =
:error
=====================
def global_assign=(s)
end
::global_assign=("a")
---

(expressions)

=============================================================
private or protected calls with keyword type declaration args
=============================================================

class Name
  private getter private : Qux
end

---

(expressions
  (class_def
    name: (constant)
    (ERROR
      (private)
      (identifier)
      (private)
      (ERROR)
      (constant))))

=======================
misc keywords / methods
=======================

super
previous_def
uninitialized Class

---

(expressions
  (identifier)
  (identifier)
  (call
    (identifier)
    (argument_list
      (constant))))

==========================
fun def params on newlines
:error
==========================

fun
extreme_fun
(
param1
:
Type
,
param2
:
Type
)
:
ReturnType
  puts "hello"
end

---

(expressions
  (fun_def
    name: (identifier)
    body: (expressions
      (identifier)
      (ERROR)
      (constant)
      (ERROR)
      (identifier)
      (ERROR)
      (constant))
    (ERROR)
    body: (constant)
    body: (call
      method: (identifier)
      arguments: (argument_list
        (string)))))

==========================
symbols ending with equals
:error
==========================

:hello=
:world==world
:world == world

---

(expressions
  (symbol)
  (symbol)
  (ERROR
    (identifier))
  (call
    (symbol)
    (operator)
    (identifier)))

=================================
case expression with typed tuples
:error
=================================

case {value, this_value}
in {String, String}
	puts "hello"
in {Int32, false}
	puts "world"
end

---



=============================================================
private or protected calls with keyword type declaration args
=============================================================

class Name
  private getter private : Qux
end

---

(expressions
  (class_def
    name: (constant)
    (ERROR
      (private)
      (identifier)
      (private)
      (ERROR)
      (constant))))

================================================================================
implicit object assignment call
:error
================================================================================
inner.try &.color=(color)
--------------------------------------------------------------------------------

(expressions)

===============
inline macro if
===============

{% if flag?(:tracing) %} Crystal::Tracing.init {% end %}
GC.init

---

(expressions
  (macro_if
    (call
      (identifier)
      (argument_list
        (symbol))))
  (MISSING ";")
  (call
    (constant)
    (identifier)
    (argument_list
      (macro_end)))
  (call
    (constant)
    (identifier)))

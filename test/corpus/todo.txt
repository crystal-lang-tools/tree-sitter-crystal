=========
macro def
=========

macro name
end

---

(source_file
  (call
    (identifier)
    (argument_list
      (identifier)))
  (ERROR))

======
macros
======

{% if true %}
{% for i in [1, 2, 3] %}
%var = 1 + {{ word }}
foo = %var + 4
{% end %}
{% end %}

---

(ERROR
  (MISSING identifier)
  (operator)
  (op_call
    (op_call
      (true)
      (ERROR
        (operator))
      (operator)
      (call
        (identifier)
        (argument_list
          (call
            (identifier)
            (argument_list
              (call
                (identifier)
                (argument_list
                  (array
                    (integer)
                    (integer)
                    (integer)))))))))
    (ERROR
      (operator))
    (operator)
    (assign
      (identifier)
      (op_call
        (integer)
        (operator)
        (tuple
          (tuple
            (identifier))))))
  (then
    (op_call
      (op_call
        (identifier)
        (ERROR)
        (operator)
        (identifier))
      (operator)
      (integer))
    (tuple
      (op_call
        (op_call
          (MISSING identifier)
          (operator)
          (identifier))
        (operator)
        (MISSING identifier)))
    (tuple
      (op_call
        (op_call
          (MISSING identifier)
          (operator)
          (identifier))
        (operator)
        (MISSING identifier)))))

==============
pseudo methods
==============

class ClassName
  def initialize
    self.is_a?(Object)          # works
    self.nil?
    typeof(self, other)         # works
    sizeof(self.class)          # works
    instance_sizeof(self.class) # works
    pointerof(self)
    offsetof(self.class, 1)     # works
    self.as(Object)             # works
    self.as?(Object)            # works
    responds_to?(:method)
    self.!                      # works
  end
end

---

(source_file
  (class_def
    name: (constant)
    (method_def
      name: (identifier)
      (is_a
        receiver: (self)
        type: (constant))
      (comment)
      (call
        receiver: (self)
        method: (identifier))
      (typeof
        (self)
        (identifier))
      (comment)
      (sizeof
        (class_type
          (self)))
      (comment)
      (instance_sizeof
        (class_type
          (self)))
      (comment)
      (call
        method: (identifier)
        arguments: (argument_list
          (self)))
      (offsetof
        (class_type
          (self))
        (integer))
      (comment)
      (as
        receiver: (self)
        type: (constant))
      (comment)
      (as
        receiver: (self)
        type: (constant))
      (comment)
      (call
        method: (identifier)
        arguments: (argument_list
          (symbol)))
      (call
        receiver: (self)
        method: (operator))
      (comment))))

=======================
misc keywords / methods
=======================

super
previous_def
uninitialized Class

---

(source_file
  (identifier)
  (identifier)
  (call
    (identifier)
    (argument_list
      (constant))))

==========================
fun def params on newlines
==========================

fun
extreme_fun
(
param1
:
Type
,
param2
:
Type
)
:
ReturnType
  puts "hello"
end

---

(source_file
  (fun_def
    name: (identifier)
    body: (expressions
      (identifier)
      (ERROR)
      (constant)
      (ERROR)
      (identifier)
      (ERROR)
      (constant))
    (ERROR)
    body: (constant)
    body: (call
      method: (identifier)
      arguments: (argument_list
        (string)))))

==============================
instance var with pointer type
==============================

@ivar : UInt8*

---

(source_file
  (op_call
    (type_declaration
      (instance_var)
      (constant))
    (operator)
    (MISSING identifier)))

=================================
Array-like and hash-like literals
:error
=================================

Set{1, 2, 3}
MyType{"foo" => "bar"}

---

=================
static array type
:error
=================

StaticArray(Int32, 8)
StaticArray(Char*, 2)

---

==========================
symbols ending with equals
==========================

:hello=
:world==world
:world == world

---

(source_file
  (symbol)
  (symbol)
  (ERROR
    (identifier))
  (op_call
    (symbol)
    (operator)
    (identifier)))

=================================
case expression with typed tuples
:error
=================================

case {value, this_value}
in {String, String}
	puts "hello"
in {Int32, false}
	puts "world"
end

---

=====================
global method with =
:error
=====================
def global_assign=(s)
end
::global_assign=("a")
---

(source_file)

=============================================================
private or protected calls with keyword type declaration args
=============================================================

class Name
  private getter private : Qux
end

---

(source_file
  (class_def
    name: (constant)
    (ERROR
      (private)
      (identifier)
      (private)
      (ERROR)
      (constant))))
